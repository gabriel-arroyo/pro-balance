<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="inventory.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure pragmas browser query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2180"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="TransactionItems" custom_title="0" dock_id="1" table="4,16:mainTransactionItems"/><dock_state state="000000ff00000000fd000000010000000200000460000002c4fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000004600000010f00ffffff000004600000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="AuthorizedBuyingQuantities" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="25"/><column index="2" value="59"/><column index="3" value="101"/><column index="4" value="39"/><column index="5" value="85"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Inventory" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="25"/><column index="2" value="59"/><column index="3" value="85"/><column index="4" value="96"/><column index="5" value="41"/><column index="6" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="25"/><column index="2" value="132"/><column index="3" value="85"/><column index="4" value="61"/><column index="5" value="69"/><column index="6" value="26"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="TransactionItems" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="25"/><column index="2" value="76"/><column index="3" value="59"/><column index="4" value="46"/><column index="5" value="109"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Transactions" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="25"/><column index="2" value="54"/><column index="3" value="85"/><column index="4" value="257"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">SELECT p.name, 
       SUM(CASE WHEN t.type = 'in' THEN ti.quantity ELSE 0 END)*p.package_size - 
       SUM(CASE WHEN t.type = 'out' THEN ti.quantity ELSE 0 END)*p.package_size AS existencia_anterior
FROM Products p
LEFT JOIN TransactionItems ti ON p.id = ti.product_id
LEFT JOIN Transactions t ON ti.transaction_id = t.id
GROUP BY p.name;

-- Last quantity on inventory
SELECT previous_existence + bought - consumed
FROM Inventory
WHERE product_id = 1
ORDER BY date DESC
LIMIT 1;

-- bought
SELECT SUM(ti.quantity * p.package_size) AS out
FROM TransactionItems ti
JOIN Products p ON ti.product_id = p.id
WHERE ti.transaction_id IN (
    SELECT t.id FROM Transactions t
    WHERE t.date &gt;= '2024-10-01'
    AND t.type = 'in'
)
AND ti.product_id = 2;


SELECT SUM(ti.quantity * p.package_size) AS out
FROM TransactionItems ti
JOIN Products p ON ti.product_id = p.id

SELECT * FROM TransactionItems ti
WHERE ti.transaction_id IN (
    SELECT t.id FROM Transactions t
    WHERE t.date &gt;= '2024-10-01'
    AND t.type = 'in'
)
AND ti.product_id = 2
JOUN;

-- consumed
SELECT SUM(ti.quantity * p.package_size) AS out
FROM TransactionItems ti
JOIN Products p ON ti.product_id = p.id
WHERE ti.transaction_id IN (
    SELECT t.id FROM Transactions t
    WHERE t.date &gt;= '2024-10-01'
    AND t.type = 'out'
)
AND ti.product_id = 1;

-- returned from field to warehouse
SELECT SUM(ti.quantity * p.package_size) AS out
FROM TransactionItems ti
JOIN Products p ON ti.product_id = p.id
WHERE ti.transaction_id IN (
    SELECT t.id FROM Transactions t
    WHERE t.date &gt;= '2024-10-01'
    AND t.type = 'return'
)
AND ti.product_id = 1;






SELECT previous_existence + bought - consumed
FROM Inventory
WHERE product_id = 1
ORDER BY date DESC
LIMIT 1;



WITH LastInventory AS (
    SELECT 
        product_id,
        previous_existence + bought - consumed AS last_quantity,
        ROW_NUMBER() OVER (PARTITION BY product_id ORDER BY date DESC) AS rn
    FROM Inventory
	),
	TotalBought AS (
		SELECT ti.product_id, SUM(ti.quantity * p.package_size) AS total_bought
		FROM TransactionItems ti
		JOIN Products p ON ti.product_id = p.id
		WHERE ti.transaction_id IN (
			SELECT t.id 
			FROM Transactions t
			WHERE t.date &gt;= '2024-10-01' AND t.type = 'in'
		)
		GROUP BY ti.product_id
	)
SELECT product_id, last_quantity
FROM LastInventory
WHERE rn = 1




    p.id AS product_id,
    COALESCE(li.last_quantity, 0) AS last_quantity,
    COALESCE(tb.total_bought, 0) AS total_bought,
    COALESCE(tc.total_consumed, 0) AS total_consumed,
    COALESCE(tr.total_returned, 0) AS total_returned
FROM Products p
LEFT JOIN LastInventory li ON p.id = li.product_id
LEFT JOIN TotalBought tb ON p.id = tb.product_id
LEFT JOIN TotalConsumed tc ON p.id = tc.product_id
LEFT JOIN TotalReturned tr ON p.id = tr.product_id;




SELECT product_id, last_quantity
FROM LastInventory
WHERE rn = 1;







WITH LastInventory AS (
    SELECT product_id, previous_existence + bought - consumed AS last_quantity
    FROM Inventory
    WHERE product_id IN (SELECT DISTINCT product_id FROM Inventory)
    ORDER BY date DESC
),

TotalBought AS (
    SELECT ti.product_id, SUM(ti.quantity * p.package_size) AS total_bought
    FROM TransactionItems ti
    JOIN Products p ON ti.product_id = p.id
    WHERE ti.transaction_id IN (
        SELECT t.id 
        FROM Transactions t
        WHERE t.date &gt;= '2024-10-01' AND t.type = 'in'
    )
    GROUP BY ti.product_id
),

TotalConsumed AS (
    SELECT ti.product_id, SUM(ti.quantity * p.package_size) AS total_consumed
    FROM TransactionItems ti
    JOIN Products p ON ti.product_id = p.id
    WHERE ti.transaction_id IN (
        SELECT t.id 
        FROM Transactions t
        WHERE t.date &gt;= '2024-10-01' AND t.type = 'out'
    )
    GROUP BY ti.product_id
),

TotalReturned AS (
    SELECT ti.product_id, SUM(ti.quantity * p.package_size) AS total_returned
    FROM TransactionItems ti
    JOIN Products p ON ti.product_id = p.id
    WHERE ti.transaction_id IN (
        SELECT t.id 
        FROM Transactions t
        WHERE t.date &gt;= '2024-10-01' AND t.type = 'return'
    )
    GROUP BY ti.product_id
)

SELECT 
    p.id AS product_id,
    COALESCE(li.last_quantity, 0) AS last_quantity,
    COALESCE(tb.total_bought, 0) AS total_bought,
    COALESCE(tc.total_consumed, 0) AS total_consumed,
    COALESCE(tr.total_returned, 0) AS total_returned
FROM Products p
LEFT JOIN LastInventory li ON p.id = li.product_id
LEFT JOIN TotalBought tb ON p.id = tb.product_id
LEFT JOIN TotalConsumed tc ON p.id = tc.product_id
LEFT JOIN TotalReturned tr ON p.id = tr.product_id;


</sql><current_tab id="0"/></tab_sql></sqlb_project>
